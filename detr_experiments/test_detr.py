"""
CODE FOR RUNNING DETR ON A FOLDER OF IMAGES - SAVES DETR LABELS AND A .CSV FILE WITH APS AND ARS

On Validation Set, 4 classes:
python detr_experiments/test_detr.py --data_path ../Segmentsai/Test --resume ../500epochweights/checkpoint.pth --dataset_file foos --thresh 0.7 --output_dir detr_experiments/images/ --image_set val
On Synthetic data, 4 classes:
python detr_experiments/test_detr.py --data_path ../Segmentsai/synthesiser/data --resume ../500epochweights/checkpoint.pth --dataset_file foos --thresh 0.7 --output_dir detr_experiments/images/ --image_set test


On validation data, 14 classes:
python detr_experiments/test_detr.py --data_path ../Segmentsai/Test --resume ../600epoch_positional2/checkpoint.pth --dataset_file foos_positional --thresh 0.5 --output_dir detr_experiments/images/ --image_set val --nclasses 14
On synthetic data, 14 classes:
python detr_experiments/test_detr.py --data_path ../Segmentsai/synthesiser/data --resume ../600epoch_positional2/checkpoint.pth --dataset_file foos_positional --thresh 0.5 --output_dir detr_experiments/test_images/ --image_set test --nclasses 14



"""


import math
import os
import cv2
import sys
import argparse
from pathlib import Path
from torch.utils.data import DataLoader
from typing import Iterable
from PIL import Image
import numpy as np
import torch
from torchvision.utils import draw_bounding_boxes
import matplotlib.pyplot as plt
import time
import csv
import random

filedir = os.path.join("..", os.getcwd())
sys.path.append(filedir)
import util.misc as utils
from models import build_model
from datasets.foos import make_Foos_transforms
from engine import evaluate
from datasets import build_dataset, get_coco_api_from_dataset

import colorsys

def create_distinct_colors(n):
    colors = []
    for i in range(n):
        hue = i / n  # Vary the hue value evenly
        saturation = 0.7  # Adjust the saturation and lightness as needed
        lightness = 0.6
        rgb = colorsys.hls_to_rgb(hue, lightness, saturation)
        rgb_scaled = tuple(int(x * 255) for x in rgb)  # Scale RGB values to 0-255
        colors.append(rgb_scaled)
    return colors

def box_cxcywh_to_xyxy(x):
    x_c, y_c, w, h = x.unbind(1)
    b = [(x_c - 0.5 * w), (y_c - 0.5 * h),
         (x_c + 0.5 * w), (y_c + 0.5 * h)]
    return torch.stack(b, dim=1)

def rescale_bboxes(out_bbox, size):
    img_w, img_h = size
    b = box_cxcywh_to_xyxy(out_bbox)
    b = b * torch.tensor([img_w, img_h,
                          img_w, img_h
                          ], dtype=torch.float32)
    return b

def get_images(in_path):
    img_files = []
    for (dirpath, dirnames, filenames) in os.walk(in_path):
        for file in filenames:
            filename, ext = os.path.splitext(file)
            ext = str.lower(ext)
            if ext == '.jpg' or ext == '.jpeg' or ext == '.gif' or ext == '.png' or ext == '.pgm':
                img_files.append(os.path.join(dirpath, file))

    return img_files

def create_distinct_colors(n):
    colors = []
    for i in range(n):
        hue = i / n  # Vary the hue value evenly
        saturation = 0.7  # Adjust the saturation and lightness as needed
        lightness = 0.6
        rgb = colorsys.hls_to_rgb(hue, lightness, saturation)
        rgb_scaled = tuple(int(x * 255) for x in rgb)  # Scale RGB values to 0-255
        colors.append(rgb_scaled)
    return colors


def get_args_parser():
    parser = argparse.ArgumentParser('Set transformer detector', add_help=False)

    #default command line arguments
    parser.add_argument('--lr', default=1e-4, type=float) #learning rate of 1e-4
    parser.add_argument('--lr_backbone', default=1e-5, type=float)
    parser.add_argument('--batch_size', default=6, type=int)
    parser.add_argument('--weight_decay', default=1e-4, type=float)
    parser.add_argument('--epochs', default=300, type=int)
    parser.add_argument('--lr_drop', default=200, type=int)
    parser.add_argument('--clip_max_norm', default=0.1, type=float,
                        help='gradient clipping max norm')

    # Model parameters
    parser.add_argument('--frozen_weights', type=str, default=None,
                        help="Path to the pretrained model. If set, only the mask head will be trained")
    # * Backbone
    parser.add_argument('--backbone', default='resnet50', type=str,
                        help="Name of the convolutional backbone to use")
    parser.add_argument('--dilation', action='store_true',
                        help="If true, we replace stride with dilation in the last convolutional block (DC5)")
    parser.add_argument('--position_embedding', default='sine', type=str, choices=('sine', 'learned'),
                        help="Type of positional embedding to use on top of the image features")

    # * Transformer
    parser.add_argument('--enc_layers', default=6, type=int,
                        help="Number of encoding layers in the transformer")
    parser.add_argument('--dec_layers', default=6, type=int,
                        help="Number of decoding layers in the transformer")
    parser.add_argument('--dim_feedforward', default=2048, type=int,
                        help="Intermediate size of the feedforward layers in the transformer blocks")
    parser.add_argument('--hidden_dim', default=256, type=int,
                        help="Size of the embeddings (dimension of the transformer)")
    parser.add_argument('--dropout', default=0.1, type=float,
                        help="Dropout applied in the transformer")
    parser.add_argument('--nheads', default=8, type=int,
                        help="Number of attention heads inside the transformer's attentions")
    parser.add_argument('--num_queries', default=29, type=int,
                        help="Number of query slots")
    parser.add_argument('--pre_norm', action='store_true')

    # * Segmentation
    parser.add_argument('--masks', action='store_true',
                        help="Train segmentation head if the flag is provided")

    # # Loss
    parser.add_argument('--no_aux_loss', dest='aux_loss', action='store_false',
                        help="Disables auxiliary decoding losses (loss at each layer)")
    # * Matcher
    parser.add_argument('--set_cost_class', default=1, type=float,
                        help="Class coefficient in the matching cost")
    parser.add_argument('--set_cost_bbox', default=5, type=float,
                        help="L1 box coefficient in the matching cost")
    parser.add_argument('--set_cost_giou', default=2, type=float,
                        help="giou box coefficient in the matching cost")
    # * Loss coefficients
    parser.add_argument('--mask_loss_coef', default=1, type=float)
    parser.add_argument('--dice_loss_coef', default=1, type=float)
    parser.add_argument('--bbox_loss_coef', default=5, type=float)
    parser.add_argument('--giou_loss_coef', default=2, type=float)
    parser.add_argument('--eos_coef', default=0.1, type=float,
                        help="Relative classification weight of the no-object class")

    # dataset parameters
    parser.add_argument('--dataset_file', default='foos')
    parser.add_argument('--data_path', default=r'C:\Users\OliverSchamp\Documents\Thesis\Segmentsai\Test', type=str)
    parser.add_argument('--data_panoptic_path', type=str)
    parser.add_argument('--remove_difficult', action='store_true')

    parser.add_argument('--output_dir', default='images/',
                        help='path where to save the results, empty for no saving')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--resume', default='../../500epochweights/checkpoint.pth', help='resume from checkpoint')

    parser.add_argument('--thresh', default=0.7, type=float)
    parser.add_argument('--num_workers', default=2, type=int)

    parser.add_argument('--nclasses', default=4, type=int)
    parser.add_argument('--image_set', default='', type=str)

    return parser

def saveResults(imageList, bboxes_scaled, probas, output_dir, idx, nclasses):
    if nclasses == 4:
        classes = ['ball', 'figure', 'goal', 'table', 'null']
        colors = create_distinct_colors(len(classes))
        # random.Random(4).shuffle(colors)
    elif nclasses == 14:
        classes = ['ball', 'GK', 'RCB', 'LCB', 'RM', 'RCM', 'CM', 'LCM', 'LM', 'RW', 'ST', 'LW', 'goal', 'table', 'null']
        colors = create_distinct_colors(len(classes))
        # random.Random(4).shuffle(colors)
    else:
        print("No figures saved, number of classes doesn't exist")
        return

    for image, bboxes, scores in zip(imageList, bboxes_scaled, probas):
        # image = cv2.cvtColor(np.array(image), cv2.COLOR_BGR2RGB)
        image = np.array(image)
        labels = [classes[score.argmax()] for score in scores]
        colors = [colors[score.argmax()] for score in scores]

        f = plt.figure(figsize=(20, 20))
        plt.rcParams["savefig.bbox"] = 'tight'
        result = draw_bounding_boxes(torch.from_numpy(image).permute(2,0,1).to(torch.uint8), boxes=bboxes, labels=labels, colors=colors, width=2,
                                      font_size=3)

        plt.imshow(result.permute(1, 2, 0).to(torch.uint8))

        f.savefig(output_dir + str(idx) + 't.png')
        plt.close()

    return


@torch.no_grad()
def infer(images_path, model, postprocessors, device, output_dir, nclasses):
    model.eval()
    for idx, img_sample in enumerate(images_path):
        filename = os.path.basename(img_sample)
#         print("processing...{}".format(filename))
        orig_image = Image.open(img_sample, mode='r')
        w, h = orig_image.size
        transform = make_Foos_transforms("val")
        dummy_target = {
            "size": torch.as_tensor([int(h), int(w)]),
            "orig_size": torch.as_tensor([int(h), int(w)])
        }
        image, targets = transform(orig_image, dummy_target)
        image = image.unsqueeze(0)
        image = image.to(device)

        outputs = model(image)
#
        outputs["pred_logits"] = outputs["pred_logits"].cpu()
        outputs["pred_boxes"] = outputs["pred_boxes"].cpu()

        probas = outputs['pred_logits'].softmax(-1)[0, :, :-1]
        # keep = probas.max(-1).values > 0.85
        keep = probas.max(-1).values > args.thresh

        bboxes_scaled = rescale_bboxes(outputs['pred_boxes'][0, keep], orig_image.size)
        probas = probas[keep].cpu().data.numpy()

        saveResults([orig_image], [bboxes_scaled], [probas], output_dir, idx, nclasses)


def main(args):
    device = torch.device(args.device)

    dataset_test = build_dataset(image_set=args.image_set, args=args)

    model, criterion, postprocessors = build_model(args)
    if args.resume:
        checkpoint = torch.load(args.resume, map_location='cpu')
        model.load_state_dict(checkpoint['model'])
    model.to(device)

    image_paths = get_images(args.data_path)
    random.shuffle(image_paths)
    infer(image_paths[:10], model, postprocessors, device, args.output_dir, args.nclasses)

    sampler_test = torch.utils.data.SequentialSampler(dataset_test)

    data_loader_test = DataLoader(dataset_test, args.batch_size, sampler=sampler_test,
                                  drop_last=False, collate_fn=utils.collate_fn, num_workers=args.num_workers)
    base_ds = get_coco_api_from_dataset(dataset_test)
    print("EVALUATING")
    results = []
    stats, evaluator, res = evaluate(model=model, criterion=criterion, data_loader=data_loader_test, device=device, base_ds=base_ds, postprocessors=postprocessors, output_dir=args.output_dir, threshold=args.thresh)
    results.append(res)

    file = open(args.output_dir + 'test.csv', 'w')
    writer = csv.writer(file, delimiter=',')
    header = ['MAP 0.5:95 all 100', 'MAP 0.5 all 100', 'MAP 0.75 all 100', 'MAP 0.5:95 small 100',
              'MAP 0.5:95 medium 100', 'MAP 0.5:95 large 100', 'Recall 0.5:95 all 1', 'Recall 0.5:95 all 10',
              'Recall 0.5:95 all 100', 'Recall 0.5:95 small 100', 'Recall 0.5:95 medium 1', 'Recall 0.5:95 large 100']
    writer.writerow(header)
    writer.writerows(results)
    file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser('DETR training and evaluation script', parents=[get_args_parser()])
    args = parser.parse_args()
    if args.output_dir:
        Path(args.output_dir).mkdir(parents=True, exist_ok=True)
    main(args)