# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
"""
Train and eval functions used in train_29.py
"""
import math
import os
import cv2
import sys
import argparse
from pathlib import Path
from typing import Iterable
from PIL import Image
import numpy as np

import torch

import util.misc as utils

from models import build_model
from datasets.foos import make_Foos_transforms

import matplotlib.pyplot as plt
import time

CLASSES = [
    "ball", "fig", "goal", "table"
]

def box_cxcywh_to_xyxy(x):
    x_c, y_c, w, h = x.unbind(1)
    b = [(x_c - 0.5 * w), (y_c - 0.5 * h),
         (x_c + 0.5 * w), (y_c + 0.5 * h)]
    return torch.stack(b, dim=1)

def rescale_bboxes(out_bbox, size):
    img_w, img_h = size
    b = box_cxcywh_to_xyxy(out_bbox)
    b = b * torch.tensor([img_w, img_h,
                          img_w, img_h
                          ], dtype=torch.float32)
    return b

def get_images(in_path):
    img_files = []
    for (dirpath, dirnames, filenames) in os.walk(in_path):
        for file in filenames:
            filename, ext = os.path.splitext(file)
            ext = str.lower(ext)
            if ext == '.jpg' or ext == '.jpeg' or ext == '.gif' or ext == '.png' or ext == '.pgm':
                img_files.append(os.path.join(dirpath, file))

    return img_files


def get_args_parser():
    parser = argparse.ArgumentParser('Set transformer detector', add_help=False)
    parser.add_argument('--lr', default=1e-4, type=float)
    parser.add_argument('--lr_backbone', default=1e-5, type=float)
    parser.add_argument('--batch_size', default=6, type=int)
    parser.add_argument('--weight_decay', default=1e-4, type=float)
    parser.add_argument('--epochs', default=300, type=int)
    parser.add_argument('--lr_drop', default=200, type=int)
    parser.add_argument('--clip_max_norm', default=0.1, type=float,
                        help='gradient clipping max norm')

    # Model parameters
    parser.add_argument('--frozen_weights', type=str, default=None,
                        help="Path to the pretrained model. If set, only the mask head will be trained")
    # * Backbone
    parser.add_argument('--backbone', default='resnet50', type=str,
                        help="Name of the convolutional backbone to use")
    parser.add_argument('--dilation', action='store_true',
                        help="If true, we replace stride with dilation in the last convolutional block (DC5)")
    parser.add_argument('--position_embedding', default='sine', type=str, choices=('sine', 'learned'),
                        help="Type of positional embedding to use on top of the image features")

    # * Transformer
    parser.add_argument('--enc_layers', default=6, type=int,
                        help="Number of encoding layers in the transformer")
    parser.add_argument('--dec_layers', default=6, type=int,
                        help="Number of decoding layers in the transformer")
    parser.add_argument('--dim_feedforward', default=2048, type=int,
                        help="Intermediate size of the feedforward layers in the transformer blocks")
    parser.add_argument('--hidden_dim', default=256, type=int,
                        help="Size of the embeddings (dimension of the transformer)")
    parser.add_argument('--dropout', default=0.1, type=float,
                        help="Dropout applied in the transformer")
    parser.add_argument('--nheads', default=8, type=int,
                        help="Number of attention heads inside the transformer's attentions")
    parser.add_argument('--num_queries', default=29, type=int,
                        help="Number of query slots")
    parser.add_argument('--pre_norm', action='store_true')

    # * Segmentation
    parser.add_argument('--masks', action='store_true',
                        help="Train segmentation head if the flag is provided")

    # # Loss
    parser.add_argument('--no_aux_loss', dest='aux_loss', action='store_false',
                        help="Disables auxiliary decoding losses (loss at each layer)")
    # * Matcher
    parser.add_argument('--set_cost_class', default=1, type=float,
                        help="Class coefficient in the matching cost")
    parser.add_argument('--set_cost_bbox', default=5, type=float,
                        help="L1 box coefficient in the matching cost")
    parser.add_argument('--set_cost_giou', default=2, type=float,
                        help="giou box coefficient in the matching cost")
    # * Loss coefficients
    parser.add_argument('--mask_loss_coef', default=1, type=float)
    parser.add_argument('--dice_loss_coef', default=1, type=float)
    parser.add_argument('--bbox_loss_coef', default=5, type=float)
    parser.add_argument('--giou_loss_coef', default=2, type=float)
    parser.add_argument('--eos_coef', default=0.1, type=float,
                        help="Relative classification weight of the no-object class")

    # dataset parameters
    parser.add_argument('--dataset_file', default='foos')
    parser.add_argument('--data_path', type=str, default=r"C:\Users\OliverSchamp\Documents\Thesis\Segmentsai\FoosDataset")
    parser.add_argument('--data_panoptic_path', type=str)
    parser.add_argument('--remove_difficult', action='store_true')

    parser.add_argument('--output_dir', default='images/',
                        help='path where to save the results, empty for no saving')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--resume', default='../outputs/output2/checkpoint.pth', help='resume from checkpoint')

    parser.add_argument('--thresh', default=0.7, type=float)

    return parser


@torch.no_grad()
def infer(images_path, model, postprocessors, device, output_path):
    model.eval()
    duration = 0
    for img_sample in images_path:
        filename = os.path.basename(img_sample)
        print("processing...{}".format(filename))
        orig_image = Image.open(img_sample, mode='r')
        w, h = orig_image.size
        transform = make_Foos_transforms("val")
        dummy_target = {
            "size": torch.as_tensor([int(h), int(w)]),
            "orig_size": torch.as_tensor([int(h), int(w)])
        }
        image, targets = transform(orig_image, dummy_target)
        image = image.unsqueeze(0)
        image = image.to(device)


        conv_features, enc_attn_weights, dec_attn_weights = [], [], []
        hooks = [
            model.backbone[-2].register_forward_hook(
                        lambda self, input, output: conv_features.append(output)

            ),
            model.transformer.encoder.layers[-1].self_attn.register_forward_hook(
                        lambda self, input, output: enc_attn_weights.append(output[1])

            ),
            model.transformer.decoder.layers[-1].multihead_attn.register_forward_hook(
                        lambda self, input, output: dec_attn_weights.append(output[1])

            ),

        ]

        start_t = time.perf_counter()
        outputs = model(image)
        end_t = time.perf_counter()

        outputs["pred_logits"] = outputs["pred_logits"].cpu()
        outputs["pred_boxes"] = outputs["pred_boxes"].cpu()

        probas = outputs['pred_logits'].softmax(-1)[0, :, :-1]
        # keep = probas.max(-1).values > 0.85
        keep = probas.max(-1).values > args.thresh

        bboxes_scaled = rescale_bboxes(outputs['pred_boxes'][0, keep], orig_image.size)
        probas = probas[keep].cpu().data.numpy()

        for hook in hooks:
            hook.remove()

        conv_features = conv_features[0]
        enc_attn_weights = enc_attn_weights[0]
        dec_attn_weights = dec_attn_weights[0].cpu()

        #visualising cross-attention --------------------------
        # get the feature map shape
        h, w = conv_features['0'].tensors.shape[-2:]
        # concatenate all representations into one large image
        print(bboxes_scaled.shape)
        #enc_dec_attn = np.zeros(h*5,w*7) #h * 5,w * 7
        img3 = np.array(dec_attn_weights[0, 1].view(h, w))
        img3 = ((img3 - img3.min()) / (img3.max() - img3.min()))
        scale_percent = 1000  # percent of original size
        width = int(img3.shape[1] * scale_percent / 100)
        height = int(img3.shape[0] * scale_percent / 100)
        dim = (width, height)

        # resize image
        img3 = cv2.resize(img3, dim, interpolation=cv2.INTER_AREA)
        cv2.imshow("encdec_attention", img3)
        cv2.waitKey()
        # row, col = img3.shape[:2]
        # bottom = img3[row - 2:row, 0:col]
        # mean = cv2.mean(bottom)[0]
        # bordersize = 1
        # img3 = cv2.copyMakeBorder(
        #     img3,
        #     top=bordersize,
        #     bottom=bordersize,
        #     left=bordersize,
        #     right=bordersize,
        #     borderType=cv2.BORDER_CONSTANT,
        #     value=[255, 255, 255]
        # )

        #img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2RGB)
        for idx, (xmin, ymin, xmax, ymax) in zip(keep.nonzero(), bboxes_scaled):
            img3 = np.array(dec_attn_weights[0, idx].view(h, w))
            img3 = ((img3 - img3.min()) / (img3.max() - img3.min()))
            scale_percent = 1000  # percent of original size
            width = int(img3.shape[1] * scale_percent / 100)
            height = int(img3.shape[0] * scale_percent / 100)
            dim = (width, height)

            # resize image
            img3 = cv2.resize(img3, dim, interpolation=cv2.INTER_AREA)
            # img_save_path = os.path.join(output_path, filename.split('.')[0]+'decoder'+str(np.array(idx)[0])+'.jpg')
            # img3.convertTo(img3_u, CV_8U, 255.0)
            # cv2.imwrite(img_save_path, img3)
            cv2.imshow("encdec_attention", img3)
            cv2.waitKey()
        #     #img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #     row, col = img.shape[:2]
        #     bottom = img[row - 2:row, 0:col]
        #     #mean = cv2.mean(bottom)[0]
        #     # bordersize = 1
        #     # img = cv2.copyMakeBorder(
        #     #     img,
        #     #     top=bordersize,
        #     #     bottom=bordersize,
        #     #     left=bordersize,
        #     #     right=bordersize,
        #     #     borderType=cv2.BORDER_CONSTANT,
        #     #     value=[255, 255, 255]
        #     # )
        #
        #     img3 = cv2.hconcat([img3, img])

        # img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2RGB)

        # scale_percent = 1000  # percent of original size
        # width = int(img3.shape[1] * scale_percent / 100)
        # height = int(img3.shape[0] * scale_percent / 100)
        # dim = (width, height)
        #
        # # resize image
        # img3 = cv2.resize(img3, dim, interpolation=cv2.INTER_AREA)
        # cv2.imshow("encdec_attention", img3)
        # cv2.waitKey()
        # img_save_path = os.path.join(output_path, 'decattn_' + filename)
        # cv2.imwrite(img_save_path, img3)

        #encoder attention ----------------------
        f_map = conv_features['0']
        # print("Encoder attention:      ", enc_attn_weights[0].shape)
        # print("Feature map:            ", f_map.tensors.shape)
        # get the HxW shape of the feature maps of the CNN
        shape = f_map.tensors.shape[-2:]
        # and reshape the self-attention to a more interpretable shape
        sattn = enc_attn_weights[0].reshape(shape + shape)

        # downsampling factor for the CNN, is 32 for DETR and 16 for DETR DC5
        fact = 32

        # let's select 2 reference points for visualization
        #idxs = [(350, 600), (350, 700), (350, 800)]
        idxs = np.array(outputs['pred_boxes'][0, keep][:, :2])
        idxs[:,0] *= orig_image.size[0]
        idxs[:, 1] *= orig_image.size[1]
        idxs[:, [0, 1]] = idxs[:, [1, 0]] #why do i swap them????
        idxs = np.rint(idxs).astype(int)

        # for each one of the reference points, let's plot the self-attention
        # for that point
        for idx_o in idxs:
            idx = (idx_o[0] // fact, idx_o[1] // fact)
            # encattn = np.array(sattn[idx[0], idx[1]].cpu())
            encattn = np.array(sattn[..., idx[0], idx[1]].cpu())
            #normalise encattn between 0 and 256
            encattn = ((encattn-encattn.min())/(encattn.max()-encattn.min()))
            scale_percent = 2000  # percent of original size
            width = int(encattn.shape[1] * scale_percent / 100)
            height = int(encattn.shape[0] * scale_percent / 100)
            dim = (width, height)

            # resize image
            encattn = cv2.resize(encattn, dim, interpolation=cv2.INTER_AREA)

            # img_save_path = os.path.join(output_path, filename.split('.')[0]+'encoder'+str(int(idx_o[0]*idx_o[1]))+'.jpg')
            # cv2.imwrite(img_save_path, encattn)

            cv2.imshow("encatt", encattn)
            cv2.waitKey()

        if len(bboxes_scaled) == 0:
            continue

        img = np.array(orig_image)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #draw the encoder points
        for (x,y) in idxs:
            cv2.circle(img, (y,x), radius=10, color=(0, 0, 255), thickness=-1)

        for p, box in zip(probas, bboxes_scaled):
            bbox = box.cpu().data.numpy()
            bbox = bbox.astype(np.int32)
            bbox = np.array([
                [bbox[0], bbox[1]],
                [bbox[2], bbox[1]],
                [bbox[2], bbox[3]],
                [bbox[0], bbox[3]],
                ])
            bbox = bbox.reshape((4, 2))
            cv2.polylines(img, [bbox], True, (0, 255, 0), 2)
            cl = p.argmax()
            text = f'{CLASSES[cl]}: {p[cl]:0.2f}'
            cv2.putText(img, text, (bbox[0][0], bbox[0][1]), fontFace=cv2.FONT_HERSHEY_PLAIN, fontScale=1, color=(0, 0, 0),thickness=2)

        # img_save_path = os.path.join(output_path, filename)
        # cv2.imwrite(img_save_path, img)
        cv2.imshow("img", img)
        cv2.waitKey()
        infer_time = end_t - start_t
        duration += infer_time
        print("Processing...{} ({:.3f}s)".format(filename, infer_time))

    avg_duration = duration / len(images_path)
    print("Avg. Time: {:.3f}s".format(avg_duration))


if __name__ == "__main__":
    parser = argparse.ArgumentParser('DETR training and evaluation script', parents=[get_args_parser()])
    args = parser.parse_args()
    if args.output_dir:
        Path(args.output_dir).mkdir(parents=True, exist_ok=True)

    device = torch.device(args.device)

    model, _, postprocessors = build_model(args)
    if args.resume:
        checkpoint = torch.load(args.resume, map_location='cpu')
        model.load_state_dict(checkpoint['model'])
    model.to(device)
    image_paths = get_images(args.data_path)

    infer(image_paths, model, postprocessors, device, args.output_dir)