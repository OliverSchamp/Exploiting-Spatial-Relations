"""
CODE FOR READING LOG FILE AFTER DETR RUNS. DATAFRAME GRAPHS BELOW

To run this code:
python detr_experiments/read_logs.py --log_path ../500epochweights/500epochlog.txt --out_path detr_experiments/experiments_figs/4classes_trainfigs
python detr_experiments/read_logs.py --log_path ../600epoch_positional/log_positional.txt --out_path detr_experiments/experiments_figs/14classes_trainfigs
python detr_experiments/read_logs.py --log_path ../600epoch_positional_fquery/log100.txt --out_path detr_experiments/experiments_figs/14classes_fq_trainfigs

"""


import os
import json
import pandas as pd
import matplotlib.pyplot as plt
import argparse


def get_args_parser():
    parser = argparse.ArgumentParser('Set transformer detector', add_help=False)

    parser.add_argument('--log_path', default='', type=str,
                        help='path to the log file')

    parser.add_argument('--out_path', default='', type=str,
                        help='path to write the graph to')

    return parser

def read_logs_from_file(file_path):
    with open(file_path, 'r') as file:
        data = file.read()

    logs = []
    start = 0
    while True:
        start = data.find('{', start)
        if start == -1:
            break
        end = data.find('}', start)
        if end == -1:
            break
        logs.append(json.loads(data[start:end+1]))
        start = end + 1

    return logs

if __name__ == "__main__":
    parser = argparse.ArgumentParser('Read from logs file', parents=[get_args_parser()])
    args = parser.parse_args()
    file_path = args.log_path
    logs = read_logs_from_file(file_path)
    data = []
    for log in logs:
        epoch = log.get('epoch')
        if epoch is not None:
            row_data = {'Epochs': epoch}

            for key, value in log.items():
                if key.startswith('train_') or key.startswith('test_'):
                    row_data[key] = value

            data.append(row_data)

    df = pd.DataFrame(data)
    df.set_index('Epochs', inplace=True)

    plt.plot(df.index, df["train_lr"], c="blue", label="Learning rate")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Learning rate")
    plt.title("Learning rate against epochs")
    plt.savefig(os.path.join(args.out_path, "lr.png"), bbox_inches="tight")
    plt.close()
    plt.plot(df.index, df["train_class_error"], c="blue", label="Train")
    plt.plot(df.index, df["test_class_error"], c="red", label="Validation")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Classification error")
    plt.title("Classification error against epochs")
    plt.savefig(os.path.join(args.out_path, "classification_error.png"), bbox_inches="tight")
    plt.close()
    plt.plot(df.index, df["train_loss"], c="blue", label="Train")
    plt.plot(df.index, df["test_loss"], c="red", label="Validation")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.title("Hungarian bipartite matching loss against epochs")
    plt.savefig(os.path.join(args.out_path, "losses.png"), bbox_inches="tight")
    plt.close()
    plt.plot(df.index, df["train_loss_ce"], c="blue", label="Train")
    plt.plot(df.index, df["test_loss_ce"], c="red", label="Validation")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.title("Class error loss against epochs")
    plt.savefig(os.path.join(args.out_path, "losses_ce.png"), bbox_inches="tight")
    plt.close()
    plt.plot(df.index, df["train_loss_bbox"], c="blue", label="Train")
    plt.plot(df.index, df["test_loss_bbox"], c="red", label="Validation")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.title("Bounding box loss against epochs")
    plt.savefig(os.path.join(args.out_path, "losses_bbox.png"), bbox_inches="tight")
    plt.close()
    plt.plot(df.index, df["train_loss_giou"], c="blue", label="Train")
    plt.plot(df.index, df["test_loss_giou"], c="red", label="Validation")
    plt.legend(loc="upper right")
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.title("Generalised IoU loss against epochs")
    plt.savefig(os.path.join(args.out_path, "losses_giou.png"), bbox_inches="tight")
    plt.close()

    # #auxiliary losses
    # plt.plot(df.index, df["train_loss_ce_0"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_ce_0"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Class error loss against epochs")
    # # plt.savefig("../ReportFigs/losses_ce0.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_bbox_0"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_bbox_0"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Bounding box loss against epochs")
    # # plt.savefig("../ReportFigs/losses_bbox0.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_giou_0"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_giou_0"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Generalised IoU loss against epochs")
    # # plt.savefig("../ReportFigs/losses_giou0.png", bbox_inches="tight")
    # plt.show()
    #
    # plt.plot(df.index, df["train_loss_ce_1"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_ce_1"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Class error loss against epochs")
    # # plt.savefig("../ReportFigs/losses_ce1.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_bbox_1"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_bbox_1"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Bounding box loss against epochs")
    # # plt.savefig("../ReportFigs/losses_bbox1.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_giou_1"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_giou_1"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Generalised IoU loss against epochs")
    # # plt.savefig("../ReportFigs/losses_giou1.png", bbox_inches="tight")
    # plt.show()
    #
    # plt.plot(df.index, df["train_loss_ce_2"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_ce_2"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Class error loss against epochs")
    # # plt.savefig("../ReportFigs/losses_ce2.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_bbox_2"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_bbox_2"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Bounding box loss against epochs")
    # # plt.savefig("../ReportFigs/losses_bbox2.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_giou_2"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_giou_2"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Generalised IoU loss against epochs")
    # # plt.savefig("../ReportFigs/losses_giou2.png", bbox_inches="tight")
    # plt.show()
    #
    # plt.plot(df.index, df["train_loss_ce_3"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_ce_3"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Class error loss against epochs")
    # # plt.savefig("../ReportFigs/losses_ce3.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_bbox_3"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_bbox_3"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Bounding box loss against epochs")
    # # plt.savefig("../ReportFigs/losses_bbox3.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_giou_3"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_giou_3"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Generalised IoU loss against epochs")
    # # plt.savefig("../ReportFigs/losses_giou3.png", bbox_inches="tight")
    # plt.show()
    #
    # plt.plot(df.index, df["train_loss_ce_4"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_ce_4"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Class error loss against epochs")
    # # plt.savefig("../ReportFigs/losses_ce4.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_bbox_4"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_bbox_4"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Bounding box loss against epochs")
    # # plt.savefig("../ReportFigs/losses_bbox4.png", bbox_inches="tight")
    # plt.show()
    # plt.plot(df.index, df["train_loss_giou_4"], c="blue", label="Train")
    # plt.plot(df.index, df["test_loss_giou_4"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Loss")
    # plt.title("Generalised IoU loss against epochs")
    # # plt.savefig("../ReportFigs/losses_giou4.png", bbox_inches="tight")
    # plt.show()
    #
    #
    #
    # plt.plot(df.index, df["train_cardinality_error_unscaled"], c="blue", label="Train")
    # plt.plot(df.index, df["test_cardinality_error_unscaled"], c="red", label="Validation")
    # plt.legend(loc="upper right")
    # plt.xlabel("Epochs")
    # plt.ylabel("Cardinality Error")
    # plt.title("Unscaled cardinality error against epochs")
    # # plt.savefig("../ReportFigs/losses_giou.png", bbox_inches="tight")
    # plt.show()