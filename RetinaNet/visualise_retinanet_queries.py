# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
"""

used only for positional classes, just run it
python visualise_retinanet_queries.py

"""
import math
import os
import cv2
import sys
import argparse
from pathlib import Path
from typing import Iterable
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import time
import torch
import torchvision


filedir = os.path.join("..", os.getcwd())
sys.path.append(filedir)
import util.misc as utils
from models import build_model
from datasets.foos_positional import make_Foos_transforms
from math import ceil
import random

CLASSES = [
    "ball", "fig", "goal", "table"
]

def box_cxcywh_to_xyxy(x):
    x_c, y_c, w, h = x.unbind(1)
    b = [(x_c - 0.5 * w), (y_c - 0.5 * h),
         (x_c + 0.5 * w), (y_c + 0.5 * h)]
    return torch.stack(b, dim=1)

def rescale_bboxes(out_bbox, size):
    img_w, img_h = size
    b = box_cxcywh_to_xyxy(out_bbox)
    b = b * torch.tensor([img_w, img_h,
                          img_w, img_h
                          ], dtype=torch.float32)
    return b

def get_images(in_path):
    img_files = []
    for (dirpath, dirnames, filenames) in os.walk(in_path):
        for file in filenames:
            filename, ext = os.path.splitext(file)
            ext = str.lower(ext)
            if ext == '.jpg' or ext == '.jpeg' or ext == '.gif' or ext == '.png' or ext == '.pgm':
                img_files.append(os.path.join(dirpath, file))

    return img_files


def get_args_parser():
    parser = argparse.ArgumentParser('Set transformer detector', add_help=False)

    #default command line arguments
    parser.add_argument('--lr', default=1e-4, type=float) #learning rate of 1e-4
    parser.add_argument('--lr_backbone', default=1e-5, type=float)
    parser.add_argument('--batch_size', default=6, type=int)
    parser.add_argument('--weight_decay', default=1e-4, type=float)
    parser.add_argument('--epochs', default=300, type=int)
    parser.add_argument('--lr_drop', default=200, type=int)
    parser.add_argument('--clip_max_norm', default=0.1, type=float,
                        help='gradient clipping max norm')

    # Model parameters
    parser.add_argument('--frozen_weights', type=str, default=None,
                        help="Path to the pretrained model. If set, only the mask head will be trained")
    # * Backbone
    parser.add_argument('--backbone', default='resnet50', type=str,
                        help="Name of the convolutional backbone to use")
    parser.add_argument('--dilation', action='store_true',
                        help="If true, we replace stride with dilation in the last convolutional block (DC5)")
    parser.add_argument('--position_embedding', default='sine', type=str, choices=('sine', 'learned'),
                        help="Type of positional embedding to use on top of the image features")

    # * Transformer
    parser.add_argument('--enc_layers', default=6, type=int,
                        help="Number of encoding layers in the transformer")
    parser.add_argument('--dec_layers', default=6, type=int,
                        help="Number of decoding layers in the transformer")
    parser.add_argument('--dim_feedforward', default=2048, type=int,
                        help="Intermediate size of the feedforward layers in the transformer blocks")
    parser.add_argument('--hidden_dim', default=256, type=int,
                        help="Size of the embeddings (dimension of the transformer)")
    parser.add_argument('--dropout', default=0.1, type=float,
                        help="Dropout applied in the transformer")
    parser.add_argument('--nheads', default=8, type=int,
                        help="Number of attention heads inside the transformer's attentions")
    parser.add_argument('--num_queries', default=29, type=int,
                        help="Number of query slots")
    parser.add_argument('--pre_norm', action='store_true')

    # * Segmentation
    parser.add_argument('--masks', action='store_true',
                        help="Train segmentation head if the flag is provided")

    # # Loss
    parser.add_argument('--no_aux_loss', dest='aux_loss', action='store_false',
                        help="Disables auxiliary decoding losses (loss at each layer)")
    # * Matcher
    parser.add_argument('--set_cost_class', default=1, type=float,
                        help="Class coefficient in the matching cost")
    parser.add_argument('--set_cost_bbox', default=5, type=float,
                        help="L1 box coefficient in the matching cost")
    parser.add_argument('--set_cost_giou', default=2, type=float,
                        help="giou box coefficient in the matching cost")
    # * Loss coefficients
    parser.add_argument('--mask_loss_coef', default=1, type=float)
    parser.add_argument('--dice_loss_coef', default=1, type=float)
    parser.add_argument('--bbox_loss_coef', default=5, type=float)
    parser.add_argument('--giou_loss_coef', default=2, type=float)
    parser.add_argument('--eos_coef', default=0.1, type=float,
                        help="Relative classification weight of the no-object class")

    # dataset parameters
    parser.add_argument('--dataset_file', default='foos_positional')
    parser.add_argument('--data_path', type=str, default=r"C:\Users\OliverSchamp\Documents\Thesis\Segmentsai")
    parser.add_argument('--data_panoptic_path', type=str)
    parser.add_argument('--remove_difficult', action='store_true')

    parser.add_argument('--output_dir', default='images/',
                        help='path where to save the results, empty for no saving')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--resume', default='retinanet_output/model_scripted.pt', help='resume from checkpoint')

    parser.add_argument('--thresh', default=0.5, type=float)

    return parser


def pad(orig_image, padding=50):
    new_width = orig_image.width + 2 * padding
    new_height = orig_image.height + 2 * padding
    padded_image = Image.new('RGB', (new_width, new_height), (255, 255, 255))

    # Calculate the top-left coordinates for pasting the original image
    x = 2*padding  # X-coordinate
    y = 2*padding  # Y-coordinate

    padded_image.paste(orig_image, (x, y))
    return padded_image

def filterOutput(outputs, threshold):
    output = outputs[0]
    newDict = {}
    for key in output:
        newDict[key] = output[key][output['scores'] >= threshold]
    return [newDict]

@torch.no_grad()
def infer(images_path, model, device, output_path):
    model.eval()
    query_centres = []
    for img_sample in images_path:
        filename = os.path.basename(img_sample)
        print("processing...{}".format(filename))
        orig_image = Image.open(img_sample, mode='r')
        # orig_image = pad(orig_image, padding=200)
        # plt.imshow(orig_image)
        # plt.show()

        w, h = orig_image.size
        transform = make_Foos_transforms("val")
        dummy_target = {
            "size": torch.as_tensor([int(h), int(w)]),
            "orig_size": torch.as_tensor([int(h), int(w)])
        }
        image, targets = transform(orig_image, dummy_target)
        image = image.unsqueeze(0)
        image = image.to(device)

        min_val = torch.min(image)
        max_val = torch.max(image)
        image = (image - min_val) * (1 / (max_val - min_val))
        outputs = model(image)
        outputs = filterOutput(outputs, args.thresh)

        outputs[0]['boxes'][:, 1::2] /= h
        outputs[0]['boxes'][:, 0::2] /= w

        queryall = np.array([[bb[0].cpu(), bb[1].cpu(), ll.cpu()] for ll, bb in zip(outputs[0]['labels'], outputs[0]['boxes'])])
        query_centres.append(queryall)

    if args.dataset_file == 'foos':
        # second processing for queries

        background = np.ones((500, 500, 3)) * 255
        for k in range(len(query_centres)):
            for j in range(query_centres[k]):
                query0 = query_centres[k][j]
                if query0[2] == 0:
                    color = (0, 0, 255)  # ball = blue
                elif query0[2] == 1:  # GK
                    color = (255, 0, 0)  # figure=red
                elif query0[2] == 2:
                    color = (0, 255, 0)  # goal=green
                elif query0[2] == 3:
                    color = (255, 0, 255)  # table=magenta
                elif query0[2] == 4:
                    # color = (255, 255, 255)  # null=white
                    continue
                query = query0[:2]
                cv2.circle(background, np.round(query * 500).astype(int), radius=1, color=color, thickness=-1)

        # cv2.imshow("combined", background)
        # cv2.waitKey()
        plt.imshow(background)
        plt.xticks([])
        plt.yticks([])
        plt.show()



    if args.dataset_file == 'foos_positional':

        background = np.ones((500, 500, 3)) * 255
        for k in range(len(query_centres)):
            for j in range(query_centres[k].shape[0]):
                query0 = query_centres[k][j, :]
                if query0[2] == 0:
                    # color = (0, 0, 0)  # background
                    continue
                elif query0[2] == 2:  # GK
                    color = (255, 0, 0)  # figure=red
                elif query0[2] >= 3 and query0[2] <= 4:  # DF
                    color = (100, 100, 0)
                elif query0[2] >= 5 and query0[2] <= 9:  # MD
                    color = (0, 0, 0)
                elif query0[2] >= 10 and query0[2] <= 12:  # FW
                    color = (0, 100, 100)  # figure=red
                elif query0[2] == 13:
                    color = (0, 255, 0)  # goal=green
                elif query0[2] == 14:
                    color = (255, 0, 255)  # table=magenta
                query = query0[:2]
                cv2.circle(background, np.round(query * 500).astype(int), radius=1, color=color, thickness=-1)

        # cv2.imshow("combined", background)
        # cv2.waitKey()
        plt.imshow(background)
        plt.xticks([])
        plt.yticks([])
        plt.show()


if __name__ == "__main__":
    parser = argparse.ArgumentParser('DETR training and evaluation script', parents=[get_args_parser()])
    args = parser.parse_args()
    if args.output_dir:
        Path(args.output_dir).mkdir(parents=True, exist_ok=True)

    device = torch.device(args.device)

    model = torchvision.models.detection.retinanet_resnet50_fpn(pretrained=False)
    weights = torch.jit.load(args.resume)
    model.load_state_dict(weights.state_dict())

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    model.eval()

    image_paths = get_images(args.data_path + '/synthesiser/data')

    random.shuffle(image_paths)

    infer(image_paths[:500], model, device, args.output_dir)