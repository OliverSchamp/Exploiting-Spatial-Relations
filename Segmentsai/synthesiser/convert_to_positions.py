"""
See the identical script in the Segmentsai folder
"""

import json

# Load the JSON data from the file
with open('synth_labels.json') as json_file:
    data = json.load(json_file)

# Define the mapping of class values to positional classes
position_classes = {
    1: 'GK',
    2: 'RCB',
    3: 'LCB',
    4: 'RM',
    5: 'RCM',
    6: 'CM',
    7: 'LCM',
    8: 'LM',
    9: 'RW',
    10: 'ST',
    11: 'LW'
}

new_categories = [
    {"supercategory": "none", "name": "ball", "id": 0},
    {"supercategory": "none", "name": "GK", "id": 1},
    {"supercategory": "none", "name": "RCB", "id": 2},
    {"supercategory": "none", "name": "LCB", "id": 3},
    {"supercategory": "none", "name": "RM", "id": 4},
    {"supercategory": "none", "name": "RCM", "id": 5},
    {"supercategory": "none", "name": "CM", "id": 6},
    {"supercategory": "none", "name": "LCM", "id": 7},
    {"supercategory": "none", "name": "LM", "id": 8},
    {"supercategory": "none", "name": "RW", "id": 9},
    {"supercategory": "none", "name": "ST", "id": 10},
    {"supercategory": "none", "name": "LW", "id": 11},
    {"supercategory": "none", "name": "goal", "id": 12},
    {"supercategory": "none", "name": "table", "id": 13},
]

data['categories'] = new_categories

# Create a dictionary to store the bounding boxes for each image
image_annots = {}

# Iterate over the annotations and filter for class 1 (figure)
for annotation in data['annotations']: #store the general annotation id with this bounding box as well
    # i = image id
    # annotation = list of
    category_id = annotation['category_id']
    if category_id == 1:
        image_id = annotation['image_id']
        bbox = annotation['bbox']

        # Check if the image_id exists in the dictionary
        if image_id in image_annots:
            image_annots[image_id].append(annotation)
        else:
            image_annots[image_id] = [annotation]

new_annotations = []
# Iterate over the images and rename the class labels
for image in data['images']:
    image_id = image['id']

    # Check if the image_id exists in the dictionary
    if image_id in image_annots:
        figure_annotations = image_annots[image_id]

        bboxes = [anno['bbox'] for anno in figure_annotations]
        ids = [anno['id'] for anno in figure_annotations]
        areas = [anno['area'] for anno in figure_annotations]

        # Sort the bounding boxes by index 1 (y-coordinate)
        # bboxes.sort(key=lambda bbox: bbox[1])
        combined = list(zip(bboxes, ids, areas))
        combined.sort(key=lambda pair: pair[0][1])

        # Unzip the sorted pairs
        bboxes, ids, areas = map(list, zip(*combined))

        # Iterate over the positional classes and rename the class labels
        position_index = 0
        position_order = [1, 2, 3, 11, 10, 9, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 9, 10, 11, 3, 2, 1]
        for count in [1, 2, 3, 5, 5, 3, 2, 1]:
            bar_bboxes = bboxes[:count]
            bar_ids = ids[:count]
            bar_areas = areas[:count]
            combined = list(zip(bar_bboxes, bar_ids, bar_areas))
            combined.sort(key=lambda pair: pair[0][0])
            bar_bboxes, bar_ids, bar_areas = map(list, zip(*combined))
            for c, d, e in zip(bar_bboxes, bar_ids, bar_areas):
                bboxes.pop(0)
                ids.pop(0)
                areas.pop(0)
                new_anno = {"id": d, "bbox": c, "image_id": image_id, "ignore": 0, "category_id": position_order[position_index], "iscrowd": 0, "area": e}
                new_annotations.append(new_anno)
                position_index += 1

goal_table_annotations = []
for annotation in data['annotations']:
    if annotation['category_id'] != 1:
        if annotation['category_id'] == 2:
            annotation['category_id'] = 12
        elif annotation['category_id'] == 3:
            annotation['category_id'] = 13
        goal_table_annotations.append(annotation)

data['annotations'] = new_annotations + goal_table_annotations
# Save the modified JSON data
with open('modified_data.json', 'w') as json_file:
    json.dump(data, json_file)