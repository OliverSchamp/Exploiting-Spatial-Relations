"""
Script that takes a .json annotated file with 4 classes, and converts the figure class into 11 positional class annotations. Only works if all 22 figures (or 21 minus bottom GK) are annotated

"""

import json
import os

def delete_png_file(file_path):
    if os.path.exists(file_path):  # Check if the file exists
        if file_path.endswith(".png"):  # Check if the file is a .png file
            os.remove(file_path)  # Delete the file
            print(f"The file '{file_path}' has been deleted.")
        else:
            print(f"'{file_path}' is not a .png file.")
    else:
        print(f"The file '{file_path}' does not exist.")

# Load the JSON data from the file
with open('test.json') as json_file:
    data = json.load(json_file)

# Define the mapping of class values to positional classes
position_classes = {
    1: 'GK',
    2: 'RCB',
    3: 'LCB',
    4: 'RM',
    5: 'RCM',
    6: 'CM',
    7: 'LCM',
    8: 'LM',
    9: 'RW',
    10: 'ST',
    11: 'LW'
}

new_categories = [
    {"supercategory": "none", "name": "ball", "id": 0},
    {"supercategory": "none", "name": "GK", "id": 1},
    {"supercategory": "none", "name": "RCB", "id": 2},
    {"supercategory": "none", "name": "LCB", "id": 3},
    {"supercategory": "none", "name": "RM", "id": 4},
    {"supercategory": "none", "name": "RCM", "id": 5},
    {"supercategory": "none", "name": "CM", "id": 6},
    {"supercategory": "none", "name": "LCM", "id": 7},
    {"supercategory": "none", "name": "LM", "id": 8},
    {"supercategory": "none", "name": "RW", "id": 9},
    {"supercategory": "none", "name": "ST", "id": 10},
    {"supercategory": "none", "name": "LW", "id": 11},
    {"supercategory": "none", "name": "goal", "id": 12},
    {"supercategory": "none", "name": "table", "id": 13},
]

data['categories'] = new_categories

# Create a dictionary to store the bounding boxes for each image
image_annots = {}

# Iterate over the annotations and filter for class 1 (figure). data is a dictionary of dictionaries
for annotation in data['annotations']: #store the general annotation id with this bounding box as well
    # i = image id
    # annotation = dictionary
    category_id = annotation['category_id']
    if category_id == 1:
        image_id = annotation['image_id']
        bbox = annotation['bbox']

        # Check if the image_id exists in the dictionary
        if image_id in image_annots:
            image_annots[image_id].append(annotation)
        else:
            image_annots[image_id] = [annotation]

new_annotations = []
imgs_to_remove = []
# Iterate over the images and rename the class labels
for image in data['images']:
    image_id = image['id']

    # Check if the image_id exists in the dictionary
    if image_id in image_annots:
        figure_annotations = image_annots[image_id]

        bboxes = [anno['bbox'] for anno in figure_annotations]
        ids = [anno['id'] for anno in figure_annotations]
        areas = [anno['area'] for anno in figure_annotations]

        # Sort the bounding boxes by index 1 (y-coordinate)
        # bboxes.sort(key=lambda bbox: bbox[1])
        combined = list(zip(bboxes, ids, areas))
        combined.sort(key=lambda pair: pair[0][1])

        # Unzip the sorted pairs
        bboxes, ids, areas = map(list, zip(*combined))

        if len(bboxes) < 21:
            imgs_to_remove.append([image_id, image['file_name']])

        # Iterate over the positional classes and rename the class labels
        position_index = 0
        position_order = [1, 2, 3, 11, 10, 9, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 9, 10, 11, 3, 2, 1] # the class numbers in new_categories from top to bottom, left to right, for each figure: [GK, RCB, LCB ...]
        for count in [1, 2, 3, 5, 5, 3, 2, 1]: #iterate through the 1-2-3-5-5-3-2-1 structure and assign the position_order values
            if len(bboxes):
                bar_bboxes = bboxes[:count]
                bar_ids = ids[:count]
                bar_areas = areas[:count]
                combined = list(zip(bar_bboxes, bar_ids, bar_areas))
                combined.sort(key=lambda pair: pair[0][0])
                bar_bboxes, bar_ids, bar_areas = map(list, zip(*combined))
                for c, d, e in zip(bar_bboxes, bar_ids, bar_areas):
                    bboxes.pop(0)
                    ids.pop(0)
                    areas.pop(0)
                    new_anno = {"id": d, "bbox": c, "image_id": image_id, "ignore": 0, "category_id": position_order[position_index], "iscrowd": 0, "area": e}
                    new_annotations.append(new_anno)
                    position_index += 1

goal_table_annotations = []
for annotation in data['annotations']:
    if annotation['category_id'] != 1:
        if annotation['category_id'] == 2:
            annotation['category_id'] = 12
        elif annotation['category_id'] == 3:
            annotation['category_id'] = 13
        goal_table_annotations.append(annotation)

data['annotations'] = new_annotations + goal_table_annotations

#remove the images that have less than 21 figures, a small minority had figures too difficult to make out - only for validation/train set of course
for i in imgs_to_remove:
    data['annotations'] = [annotation for annotation in data["annotations"] if annotation["image_id"] != i[0]]
    data['images'] = [img for img in data["images"] if img["id"] != i[0]]

    # remove the data files Test/ + i[1]
    # delete_png_file('Train/' + i[1]) # is this necessary?

# Save the modified JSON data
with open('test_positional.json', 'w') as json_file:
    json.dump(data, json_file)