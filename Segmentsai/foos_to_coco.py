"""
Converts the segments.ai YOLO darknet format that is downloaded with my foosball dataset from download_coco.py to the COCO annotation format
"""

import re
import os
import cv2
import json
import itertools
import numpy as np
from glob import glob
import scipy.io as sio
from pycocotools import mask as cocomask
from PIL import Image
import random

#data is exported from segments.ai in YOLO darknet format. This script converts the format to coco

def separate_txt_list(list):
    txts = []
    imgs = []
    for filename in list:
        if '.txt' in filename:
            txts.append(filename)
        else:
            imgs.append(filename)
    return imgs, txts

categories = [
    {
        "supercategory": "none",
        "name": "figure",
        "id": 1
    },
    {
        "supercategory": "none",
        "name": "ball",
        "id": 0
    },
    {
        "supercategory": "none",
        "name": "goal",
        "id": 2
    },
    {
        "supercategory": "none",
        "name": "table",
        "id": 3
    }
]

# path = r"segments/oschamp_foos/80files_labelled/"
path = r"segments/oschamp_Foosball_Final/labeled/"
json_file = "{}.json".format('train')

res_file = {
        "categories": categories,
        "images": [],
        "annotations": []
    }

annot_count = 0
image_id = 0
processed = 0
image_list = os.listdir(path)
image_list, text_list = separate_txt_list(image_list)


#shuffle the image list, then have an if statement which does different behaviour if above i
random.Random(4).shuffle(image_list)
random.Random(4).shuffle(text_list)

for i in range(len(image_list)-50):
    img_file = image_list[i]
    img = Image.open(path + img_file)
    img_w, img_h = img.size

    img_elem = {"file_name": img_file,
                "height": img_h,
                "width": img_w,
                "id": image_id}

    res_file["images"].append(img_elem)

    img.save('Train/' + img_file)

    ############## ######################

    label_file = text_list[i]
    # print('frame' + convert_number(i+1) + '.txt')
    file1 = open(path + label_file, 'r')
    Lines = file1.readlines()

    count = 0
    # Strips the newline character
    for line in Lines:
        count += 1
        # print("Line{}: {}".format(count, line.strip()))
        id, x, y, w, h = line.split(' ')
        xmin = float(x) - float(w)/2
        ymin = float(y) - float(h)/2
        if id == '2':
            id = '0'
        elif id == '3':
            id = '2'
        if id == '4':
            id = '3'
        annot_elem = {
            "id": annot_count,
            "bbox": [
                float(xmin)*img_w*1280/img_w, #fix for 720p dynamic rescaling problem in Segments
                float(ymin)*img_h*720/img_h,
                float(w)*img_w*1280/img_w,
                float(h)*img_h*720/img_h
            ],
            # "segmentation": list([poly]),
            "image_id": image_id,
            "ignore": 0,
            "category_id": int(id),
            "iscrowd": 0,
            "area": float(w)*float(h)*img_w*img_h*1280/img_w*720/img_h
        }

        res_file["annotations"].append(annot_elem)
        annot_count += 1

    image_id += 1
    processed += 1

with open(json_file, "w") as f:
    json_str = json.dumps(res_file)
    f.write(json_str)

############################################################# test set

json_file = "{}.json".format('test')

res_file = {
        "categories": categories,
        "images": [],
        "annotations": []
    }

annot_count = 0
image_id = 0
processed = 0

for i in range(len(image_list)-50, len(image_list)):
    img_file = image_list[i]
    img = Image.open(path + img_file)
    img_w, img_h = img.size

    img_elem = {"file_name": img_file,
                "height": img_h,
                "width": img_w,
                "id": image_id}

    res_file["images"].append(img_elem)

    img.save('Test/' + img_file)

    ############## ######################

    label_file = text_list[i]
    # print('frame' + convert_number(i+1) + '.txt')
    file1 = open(path + label_file, 'r')
    Lines = file1.readlines()

    count = 0
    # Strips the newline character
    for line in Lines:
        count += 1
        # print("Line{}: {}".format(count, line.strip()))
        id, x, y, w, h = line.split(' ')
        xmin = float(x) - float(w)/2
        ymin = float(y) - float(h)/2
        if id == '2':
            id = '0'
        elif id == '3':
            id = '2'
        if id == '4':
            id = '3'
        annot_elem = {
            "id": annot_count,
            "bbox": [
                float(xmin)*img_w*1280/img_w, #fix for 720p dynamic rescaling problem in Segments
                float(ymin)*img_h*720/img_h,
                float(w)*img_w*1280/img_w,
                float(h)*img_h*720/img_h
            ],
            # "segmentation": list([poly]),
            "image_id": image_id,
            "ignore": 0,
            "category_id": int(id),
            "iscrowd": 0,
            "area": float(w)*float(h)*img_w*img_h*1280/img_w*720/img_h
        }

        res_file["annotations"].append(annot_elem)
        annot_count += 1

    image_id += 1
    processed += 1

with open(json_file, "w") as f:
    json_str = json.dumps(res_file)
    f.write(json_str)


print("Done.")
